// TipSats Database Schema
// For Vercel Postgres or any PostgreSQL database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts (for authentication)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  creator       Creator?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Creators (content creators who receive tips)
model Creator {
  id                  String   @id @default(cuid())
  userId              String   @unique
  username            String   @unique
  displayName         String?
  bio                 String?
  avatarUrl           String?
  stacksAddress       String
  turnkeyWalletId     String?
  totalTipsReceived   Decimal  @default(0) @db.Decimal(18, 8)
  totalTipsUSD        Decimal  @default(0) @db.Decimal(18, 2)
  tipCount            Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tips Tip[]

  @@index([username])
}

// Tips sent to creators
model Tip {
  id                String   @id @default(cuid())
  creatorId         String
  tipperEmail       String?
  tipperWalletAddress String?
  amountMicroSTX    BigInt
  amountUSD         Decimal  @db.Decimal(18, 2)
  message           String?
  txHash            String?
  txStatus          TipStatus @default(PENDING)
  createdAt         DateTime @default(now())

  creator Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([txHash])
  @@index([createdAt])
}

enum TipStatus {
  PENDING
  CONFIRMED
  FAILED
}

// Embedded wallets created via Turnkey
model Wallet {
  id              String   @id @default(cuid())
  userEmail       String   @unique
  turnkeyWalletId String
  stacksAddress   String
  createdAt       DateTime @default(now())

  @@index([userEmail])
}
